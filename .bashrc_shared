# This is for Bash settings you want to share across machines.
# Let bootstrap.sh symlink this file, then source it from your local ~/.bash_profile
# [[ -f ~/.bashrc_shared ]] && . ~/.bashrc_shared

# export UID is important on Linux Docker hosts, otherwise the files and
# folders created by Docker will end up owned by root, which is non-optimal.
# exporting UID here so we don't have to remember it.
export UID

if [ -f ~/.secrets ]; then
    source ~/.secrets
fi

if command -v nvim &>/dev/null; then
    export EDITOR=nvim
fi

if [ -f /usr/bin/vimpager ]; then
    export PAGER=/usr/bin/vimpager
    export VIMPAGER=/usr/bin/vimpager
    alias less=$VIMPAGER

    if [ -f /usr/bin/nvim ]; then
        export VIMPAGER_VIM=/usr/bin/nvim
    fi
fi

if [ -f /usr/local/bin/vimpager ]; then
    export PAGER=/usr/local/bin/vimpager
    export VIMPAGER=/usr/local/bin/vimpager
    alias less=$VIMPAGER

    if [ -f /usr/local/bin/nvim ]; then
        export VIMPAGER_VIM=/usr/local/bin/nvim
    fi
fi

# Use git-delta (great for diffs) if it's installed.
if command -v git >/dev/null 2>&1 && command -v delta >/dev/null 2>&1; then
    # Only configure delta if not already set
    if [[ "$(git config --global --get core.pager)" != "delta" ]]; then
        # Core delta setup
        git config --global core.pager "delta"
        git config --global interactive.diffFilter "delta --color-only"

        # Delta's own config
        git config --global delta.features "unobtrusive-line-numbers"
        git config --global delta.navigate true
        git config --global delta.light false
        git config --global delta.side-by-side false
        git config --global delta.syntax-theme "Dracula"

        # Unobtrusive line numbers feature
        git config --global "delta.unobtrusive-line-numbers.line-numbers" true
        git config --global "delta.unobtrusive-line-numbers.line-numbers-minus-style" "#444444"
        git config --global "delta.unobtrusive-line-numbers.line-numbers-zero-style" "#444444"
        git config --global "delta.unobtrusive-line-numbers.line-numbers-plus-style" "#444444"
        git config --global "delta.unobtrusive-line-numbers.line-numbers-left-format" "{nm:>4}┊"
        git config --global "delta.unobtrusive-line-numbers.line-numbers-right-format" "{np:>4}│"
        git config --global "delta.unobtrusive-line-numbers.line-numbers-left-style" "blue"
        git config --global "delta.unobtrusive-line-numbers.line-numbers-right-style" "blue"

        # Custom colors for diff backgrounds
        git config --global delta.minus-style "syntax #4d0e23"
        git config --global delta.plus-style "syntax #094d3a"
        git config --global delta.minus-emph-style "syntax #8c1a3f"
        git config --global delta.plus-emph-style "syntax #138f6c"
    fi
fi

# Add Postgres.app CLI tools to PATH if installed (for pg_isready, psql, etc.)
if [ -d "/Applications/Postgres.app/Contents/Versions/latest/bin" ]; then
  export PATH="/Applications/Postgres.app/Contents/Versions/latest/bin:$PATH"
fi

if [ -d "/Applications/pgModeler.app/Contents/MacOS" ]; then
  export PATH="/Applications/pgModeler.app/Contents/MacOS:$PATH"
fi

# https://wiki.archlinux.org/index.php/.NET_Core#Troubleshooting
export DOTNET_ROOT=/opt/dotnet
export PATH="~/.dotnet/tools:$PATH"

# Rancher Desktop
export PATH="~/.rd/bin:$PATH"

# Use the file type backend for aws-vault because this is compatible
# with Linux (needed for Geodesic sessions).
# https://github.com/99designs/aws-vault/
# https://docs.cloudposse.com/tools/aws-vault/
export AWS_VAULT_BACKEND="file"

# Disable the AWS CLI pager. This affects all AWS commands, ensuring that
# commands with short output like `aws sts get-caller-identity` don't get
# piped into a pager.
export AWS_PAGER=""

export PATH=~/.local/bin:$PATH
export PATH=~/bin:$PATH

# Neovim setup
if [ -f /usr/bin/nvim ]; then
    alias vim="nvim"
    export EDITOR=nvim
    export NVIM_TUI_ENABLE_TRUE_COLOR=1
fi

# Python version manager (pyenv)
export PYENV_ROOT="$HOME/.pyenv"
export PATH="$PYENV_ROOT/bin:$PATH"
if command -v pyenv >/dev/null 2>&1; then
    if [ -n "$ZSH_VERSION" ]; then
        eval "$(pyenv init --path)"
        eval "$(pyenv init -)"
    else
        eval "$(pyenv init -)"
    fi
fi

# Other environment variables
export BROWSER=/usr/bin/chromium

# A hack to stop Claude Code from using cd and then
# getting confused on which directory it is in.
export CLAUDE_BASH_MAINTAIN_PROJECT_WORKING_DIR=1

# NVM setup
export NVM_DIR="$HOME/.nvm"

if [[ ! "$SSH_AUTH_SOCK" ]]; then
    if [[ -f "$XDG_RUNTIME_DIR/ssh-agent.env" ]]; then
        source "$XDG_RUNTIME_DIR/ssh-agent.env" >/dev/null
    elif [[ -f "/tmp/ssh-agent.env" ]]; then
        source "/tmp/ssh-agent.env" >/dev/null
    fi
fi

# FZF configuration - check dependencies first
if command -v fzf >/dev/null 2>&1; then
    # Base FZF options - check if bat is available for preview
    if command -v bat >/dev/null 2>&1; then
        preview_cmd='bat --color=always --style=numbers --line-range=:500 {}'
    else
        preview_cmd='cat {}'
    fi

    export FZF_DEFAULT_OPTS="--height 60% --layout=reverse --border sharp"

    # Add preview options if bat is available
    if command -v bat >/dev/null 2>&1; then
        export FZF_DEFAULT_OPTS="$FZF_DEFAULT_OPTS --preview '$preview_cmd' --preview-window=right:60%:wrap"
        export FZF_CTRL_T_OPTS="--preview '$preview_cmd' --preview-window=right:60%:wrap"
    fi

    # Basic CTRL-R options (doesn't require additional tools)
    export FZF_CTRL_R_OPTS="--preview 'echo {}' --preview-window=down:3:wrap"

    # ALT-C preview with eza if available, fallback to tree, then ls
    if command -v eza >/dev/null 2>&1; then
        export FZF_ALT_C_OPTS="--preview 'eza --tree {} | head -200'"
    elif command -v tree >/dev/null 2>&1; then
        export FZF_ALT_C_OPTS="--preview 'tree -C {} | head -200'"
    else
        export FZF_ALT_C_OPTS="--preview 'ls -la {}'"
    fi

    # Use fd if available, otherwise fall back to find
    if command -v fd >/dev/null 2>&1; then
        export FZF_DEFAULT_COMMAND='fd --type f --hidden --follow --exclude .git'
        export FZF_ALT_C_COMMAND='fd --type d --hidden --follow --exclude .git'
        export FZF_CTRL_T_COMMAND="$FZF_DEFAULT_COMMAND"
    else
        export FZF_DEFAULT_COMMAND='find . -type f -not -path "*/\.git/*"'
        export FZF_ALT_C_COMMAND='find . -type d -not -path "*/\.git/*"'
        export FZF_CTRL_T_COMMAND="$FZF_DEFAULT_COMMAND"
    fi
fi

# --------------------------- Interactive helpers ----------------------------
# Bash-specific initializations. Zsh has its own in .zshrc.
if [ -n "$BASH_VERSION" ]; then
    # direnv
    if command -v direnv >/dev/null 2>&1; then
        eval "$(direnv hook bash)"
    fi

    # Atuin (better, searchable shell history)
    if command -v atuin >/dev/null 2>&1; then
        eval "$(atuin init bash)"
    fi

    # zoxide (smarter cd) for Bash
    if command -v zoxide >/dev/null 2>&1; then
        eval "$(zoxide init bash)"
    fi
fi

# Pretty man pages with bat, fall back gracefully
if command -v bat >/dev/null 2>&1; then
    export MANPAGER="sh -c 'col -bx | bat -l man -p'"
fi

# Global ripgrep defaults
# export RIPGREP_CONFIG_PATH="$HOME/.ripgreprc"  # Disabled because Claude Code's Grep tool uses ripgrep internally and config flags cause search failures

# Safer delete: use trash-cli if available
if command -v trash >/dev/null 2>&1; then
    alias rm='trash'
fi

# Checkout git branch (including remote branches) with fzf
gitf() {
  git checkout $(git branch --all | fzf | sed 's/remotes\/origin\///')
}

# Kill process
killf() {
  pid=$(ps -ef | sed 1d | fzf -m | awk '{print $2}')
  if [ "x$pid" != "x" ]; then
    kill -${1:-9} $pid
  fi
}

# Fuzzy file open in Neovim
vf() {
    if ! command -v nvim >/dev/null 2>&1; then
        echo "Error: Neovim (nvim) is not installed"
        return 1
    fi

    local file
    file="$(fzf --preview 'bat --color=always --style=numbers --line-range=:500 {}')"
    [ -n "$file" ] && nvim "$file"
}

# Fuzzy file open in VS Code
vsf() {
    if ! command -v code >/dev/null 2>&1; then
        echo "Error: VS Code (code) is not installed"
        return 1
    fi

    local file
    file="$(fzf --preview 'bat --color=always --style=numbers --line-range=:500 {}')"
    [ -n "$file" ] && code "$file"
}

# Fuzzy find in directory contents (uses ripgrep)
rgf() {
    if ! command -v rg >/dev/null 2>&1; then
        echo "Error: ripgrep (rg) is not installed"
        return 1
    fi
    local file line
    read -r file line <<<"$(rg --line-number . | fzf -d ':' --preview 'bat --color=always --highlight-line {2} {1}' | awk -F: '{print $1, $2}')"
    if [ -n "$file" ]; then
        ${EDITOR:-nvim} "$file" +"$line"
    fi
}

# Fuzzy find and checkout git commit
commitf() {
    local commits commit
    commits=$(git log --oneline --color=always | fzf --ansi --preview 'git show --color=always {1}' | awk '{print $1}')
    if [ -n "$commits" ]; then
        git checkout "$commits"
    fi
}

# Fuzzy find git stash and apply
stashf() {
    local stash
    stash=$(git stash list | fzf --preview 'git stash show --color=always {1}' | cut -d: -f1)
    if [ -n "$stash" ]; then
        git stash apply "$stash"
    fi
}

# Fuzzy find environment variable
envf() {
    local var
    var=$(printenv | fzf)
    if [ -n "$var" ]; then
        echo "$var" | tr -d '\n' | pbcopy  # Copies to clipboard
        echo "Copied to clipboard: "$var""
    fi
}

# Extract any archive
extract() {
    if [ -f $1 ]; then
        case $1 in
            *.tar.bz2)   tar xjf $1     ;;
            *.tar.gz)    tar xzf $1     ;;
            *.bz2)       bunzip2 $1     ;;
            *.rar)       unrar e $1     ;;
            *.gz)        gunzip $1      ;;
            *.tar)       tar xf $1      ;;
            *.tbz2)      tar xjf $1     ;;
            *.tgz)       tar xzf $1     ;;
            *.zip)       unzip $1       ;;
            *.Z)         uncompress $1  ;;
            *.7z)        7z x $1        ;;
            *)          echo "'$1' cannot be extracted via extract()" ;;
        esac
    else
        echo "'$1' is not a valid file"
    fi
}

# OpenJDK
export PATH="/opt/homebrew/opt/openjdk/bin:$PATH"

