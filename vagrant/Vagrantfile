# -*- mode: ruby -*-
# vi: set ft=ruby :

# Vagrant boxes are all provider-specific. A box for VirtualBox is
# incompatible with the VMware Fusion provider, or any other provider.
# https://www.vagrantup.com/docs/providers/basic_usage.html

# All Vagrant configuration is done below. The "2" in Vagrant.configure
# configures the configuration version (we support older styles for
# backwards compatibility). Please don't change it unless you know what
# you're doing.
Vagrant.configure("2") do |config|
  # The most common configuration options are documented and commented below.
  # For a complete reference, please see the online documentation at
  # https://docs.vagrantup.com.

  # Every Vagrant development environment requires a box. You can search for
  # boxes at https://atlas.hashicorp.com/search.
  # Boxes are broken down into two parts: username/boxname

  # Note that contrib-jessie64 includes VirtualBox Additions, thus the
  # host need not have rsync.
  # https://github.com/mitchellh/vagrant/issues/6631#issuecomment-215381203
  config.vm.box = "debian/contrib-jessie64"

  # Disable automatic box update checking. If you disable this, then
  # boxes will only be checked for updates when the user runs
  # `vagrant box outdated`. This is not recommended.
  # config.vm.box_check_update = false

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine. In the example below,
  # accessing "localhost:8080" will access port 80 on the guest machine.
  # config.vm.network "forwarded_port", guest: 80, host: 8080

  # Create a private network, which allows host-only access to the machine
  # using a specific IP.
  config.vm.network "private_network", ip: "192.168.33.33"

  # Create a public network, which generally matched to bridged network.
  # Bridged networks make the machine appear as another physical device on
  # your network.
  # config.vm.network "public_network"

  # Share an additional folder to the guest VM. The first argument is
  # the path on the host to the actual folder. The second argument is
  # the path on the guest to mount the folder. And the optional third
  # argument is a set of non-required options.
  # config.vm.synced_folder "../data", "/vagrant_data"

  # Provider-specific configuration so you can fine-tune various
  # backing providers for Vagrant. These expose provider-specific options.
  config.vm.provider "virtualbox" do |vb|
    # https://www.vagrantup.com/docs/virtualbox/configuration.html
    vb.customize [
      "modifyvm", :id,
      "--cpuexecutioncap", "90",
      "--memory", "1280",
    ]
    vb.gui = true
  end
  # View the documentation for the provider you are using for more
  # information on available options.

  # Define a Vagrant Push strategy for pushing to Atlas. Other push strategies
  # such as FTP and Heroku are also available. See the documentation at
  # https://docs.vagrantup.com/v2/push/atlas.html for more information.
  # config.push.define "atlas" do |push|
  #   push.app = "YOUR_ATLAS_USERNAME/YOUR_APPLICATION_NAME"
  # end

  # Enable provisioning with a shell script. Additional provisioners such as
  # Puppet, Chef, Ansible, Salt, and Docker are also available. Please see the
  # documentation for more information about their specific syntax and use.
  config.vm.provision "provision-as-root", type: "shell", inline: <<-SHELL
    apt-get update
    apt-get --assume-yes install git
    git --version
    apt-get --assume-yes install tmux
    if [ ! -d "/opt/vim" ]; then
      # Install Vim from source to get version 8
      apt-get --assume-yes install ncurses-dev
      cd /opt
      git clone https://github.com/vim/vim.git
      cd vim
      ./configure
      make
      make install
      vim --version
    else
      echo "Vim is already installed."
    fi
    # We will need build-essential, libssl-dev, and curl to install NVM.
    # https://github.com/creationix/nvm
    apt-get --assume-yes install build-essential
    apt-get --assume-yes install libssl-dev
    apt-get --assume-yes install curl
    echo "Root provisioning complete."
  SHELL
  # Install NVM and Node as the vagrant user (not root).
  # http://stackoverflow.com/questions/38555554/why-is-nvm-command-installed-as-root-and-also-not-found-during-vagrant-bootstrap
  config.vm.provision "provision-as-vagrant", privileged: false, type: "shell", inline: <<-SHELL
    if command -v nvm >/dev/null 2>&1; then
      echo "NVM is already installed."
    else
      # This script clones the nvm repository to ~/.nvm and adds the source
      # line to our user profile (~/.bash_profile, ~/.zshrc, ~/.profile, or ~/.bashrc).
      curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.32.1/install.sh | bash
      source ~/.nvm/nvm.sh
      nvm --version
      # Install the latest Node LTS.
      nvm install --lts
    fi
    echo "Vagrant provisioning complete."
  SHELL
end
